# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '8afe121b-03c7-44b9-94f1-a75314c90254'
  imageRepository: 'workerapp'
  containerRegistry: 'intelliq.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/worker/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
pool:
  name: 'server6'

stages:
- stage: Build
  displayName: Build 
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: 'server6'
    steps:
    - task: Docker@2
      displayName: Build
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'
- stage: Push
  displayName: Push
  jobs:
  - job: Push
    displayName: Push
    pool:
      name: 'server6'
    steps:
    - task: Docker@2
      displayName: Push
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'
- stage: Create
  displayName: Create
  jobs:
  - job: Create
    displayName: Creat
    pool:
      name: 'server6'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'ssh azureuser@172.210.71.203 docker run -d -P intelliq.azurecr.io/workerapp:147'
- stage: Test
  displayName: Test
  jobs:
  - job: Test
    displayName: Test
    pool:
      name: 'server6'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'git clone https://github.com/intelliqittrainings/FunctionalTesting.git'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'ssh azureuser@172.210.71.203 java -jar /home/azureuser/FunctionalTesting/testing.jar'

- stage: Deploy
  displayName: Deploy
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      name: 'server6'
    steps:
    - task: KubernetesManifest@1
      inputs:
       action: 'deploy'
       connectionType: 'azureResourceManager'
       azureSubscriptionConnection: 'Azure subscription 1(1)(a4334af7-bcd0-4bf3-bd92-80aed7b011e7)'
       azureResourceGroup: 'project'
       kubernetesCluster: 'aks1'
       manifests: 'worker-app.yml'